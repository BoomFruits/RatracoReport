(function () {
    'use strict';
    var app = angular.module('app.core');
    app.provider('$server', function () {
        // I want to override/wrap all the method generated by the $resource .. I managed don't see an another way to d
        this.$get = ['$q', '$resource', function ($q, $resource) {
            function resourceFactory(url, paramDefaults, actions) {
                angular.forEach(actions, function (action) {
                    if (action.Blob) {
                        if (!angular.isDefined(action.headers)) {
                            action.headers = {};
                        }
                        if (!angular.isDefined(action.headers.accept)) {
                            action.headers.accept = 'application/vnd.ms-excel';
                        }
                        if (!angular.isDefined(action.responseType)) {
                            action.responseType = 'arraybuffer';
                        }
                        if (!angular.isDefined(action.transformResponse)) {
                            action.transformResponse = function (data, headers) {
                                var disposition = headers('content-disposition');
                                disposition = disposition ? disposition.split(';') : [];
                                var filename = disposition.length > 1 ? disposition[1].split('=')[1] : null;
                                return {
                                    Blob: new Blob([data], { type: headers('content-type') }),
                                    Filename: filename
                                };
                            };
                        }
                    }
                });
                var ngResource = $resource(url, paramDefaults, actions);
                var res = {};
                var generateWrapper = function (methodName) {
                    return function (a1, a2, a3, a4) {
                        var defer = $q.defer();
                        var args = arguments;
                        ngResource[methodName].apply(this, args).$promise.then(function (res) {
                            defer.resolve(res);
                        }, function (error) {
                            if (error.status != 401) {
                                defer.reject(error);
                            }
                        });
                        return defer.promise;
                    };
                };

                angular.forEach(ngResource.prototype, function (value, method) {
                    var name = method.slice(1);
                    res[name] = generateWrapper(name);
                });

                return res;
            }

            return resourceFactory;
        }]
    });
})();
